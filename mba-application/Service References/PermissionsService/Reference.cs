//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mba_application.PermissionsService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PermissionsType", Namespace="http://schemas.datacontract.org/2004/07/mba_services.DataContracts")]
    [System.SerializableAttribute()]
    public partial class PermissionsType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PermissionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Permissions {
            get {
                return this.PermissionsField;
            }
            set {
                if ((object.ReferenceEquals(this.PermissionsField, value) != true)) {
                    this.PermissionsField = value;
                    this.RaisePropertyChanged("Permissions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PermissionsService.IPermissionsService")]
    public interface IPermissionsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionsService/GetPermission", ReplyAction="http://tempuri.org/IPermissionsService/GetPermissionResponse")]
        mba_application.PermissionsService.PermissionsType GetPermission();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionsService/GetPermission", ReplyAction="http://tempuri.org/IPermissionsService/GetPermissionResponse")]
        System.IAsyncResult BeginGetPermission(System.AsyncCallback callback, object asyncState);
        
        mba_application.PermissionsService.PermissionsType EndGetPermission(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPermissionsServiceChannel : mba_application.PermissionsService.IPermissionsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public mba_application.PermissionsService.PermissionsType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((mba_application.PermissionsService.PermissionsType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PermissionsServiceClient : System.ServiceModel.ClientBase<mba_application.PermissionsService.IPermissionsService>, mba_application.PermissionsService.IPermissionsService {
        
        private BeginOperationDelegate onBeginGetPermissionDelegate;
        
        private EndOperationDelegate onEndGetPermissionDelegate;
        
        private System.Threading.SendOrPostCallback onGetPermissionCompletedDelegate;
        
        public PermissionsServiceClient() {
        }
        
        public PermissionsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PermissionsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PermissionsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PermissionsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetPermissionCompletedEventArgs> GetPermissionCompleted;
        
        public mba_application.PermissionsService.PermissionsType GetPermission() {
            return base.Channel.GetPermission();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPermission(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPermission(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public mba_application.PermissionsService.PermissionsType EndGetPermission(System.IAsyncResult result) {
            return base.Channel.EndGetPermission(result);
        }
        
        private System.IAsyncResult OnBeginGetPermission(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetPermission(callback, asyncState);
        }
        
        private object[] OnEndGetPermission(System.IAsyncResult result) {
            mba_application.PermissionsService.PermissionsType retVal = this.EndGetPermission(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPermissionCompleted(object state) {
            if ((this.GetPermissionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPermissionCompleted(this, new GetPermissionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPermissionAsync() {
            this.GetPermissionAsync(null);
        }
        
        public void GetPermissionAsync(object userState) {
            if ((this.onBeginGetPermissionDelegate == null)) {
                this.onBeginGetPermissionDelegate = new BeginOperationDelegate(this.OnBeginGetPermission);
            }
            if ((this.onEndGetPermissionDelegate == null)) {
                this.onEndGetPermissionDelegate = new EndOperationDelegate(this.OnEndGetPermission);
            }
            if ((this.onGetPermissionCompletedDelegate == null)) {
                this.onGetPermissionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPermissionCompleted);
            }
            base.InvokeAsync(this.onBeginGetPermissionDelegate, null, this.onEndGetPermissionDelegate, this.onGetPermissionCompletedDelegate, userState);
        }
    }
}
